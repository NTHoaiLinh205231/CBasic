#include "cgen.ic"

void bn_pprint_node(bn_node_t n) {
  printf("%p\n", n);

}

sll_t *bn_layers(bn_tree_t t, long *n) {
  *n = bn_edge_height(t) + 1;
  sll_t *a = calloc(*n, sizeof(sll_t));
  for (long i = 0; i < *n; i++) {
    a[i] = sll_create_list();
  }
  /*sll_t q = sll_create_list();
  long i;
  bn_node_t cur;
  sll_push_back_g(q, (gtype){.v = t->root});
  while (!sll_is_empty(q)) {
    cur = (bn_node_t) sll_pop_front_g(q).v;
  	i = bn_distance(cur);
  	if (cur->left) {
  		sll_push_back_g(a[i], (gtype){.v = cur->left});
  		cur = cur->left;
  	} else if (cur->right) {
  		sll_push_back_g(a[i], (gtype){.v = cur->right});
  		cur = cur->right;
  	}
  }*/
  
  bn_traverse_lnr(cur, t) {
    sll_push_back_g(a[bn_distance(cur)], (gtype){.v = cur});
  }
  //sll_push_back_g(sll_t list, gtype value)
  //sll_push_back_g(sll_t list, gtype value)
  //dll_push_back_g(list_leaves, (gtype){.v =cur}); 
  //bn_distance(bn_node_t n)
  return a;
}

int main() {
  bn_node_t n1 = bn_create_node();
  bn_node_t n2 = bn_create_node();
  bn_node_t n3 = bn_create_node();
  bn_node_t n4 = bn_create_node();
  bn_node_t n5 = bn_create_node();
  bn_node_t n6 = bn_create_node();
  n1->left = n2;
  n2->top = n1;
  bn_connect2(n1, right, n3, top);
  bn_connect2(n2, left, n4, top);
  bn_connect2(n2, right, n5, top);
  bn_connect2(n3, right, n6, top);

  bn_tree_t t = bn_create_tree(n1);
  bn_pprint(t, bn_pprint_node);
  printf("\n");
  long n;
  sll_t *a = bn_layers(t, &n);
  for (long i = 0; i < n; i++) {
    printf("Layer %ld: ", i);
    sll_traverse(cur, a[i]) {
      printf("%p =>", sll_node_g_value(cur).v);
     }
    printf(" NULL\n");
  }

  bn_free_tree(&t);
  return 0;
}




/*
*n = bn_edge_height(t) + 1;
//Cap phat bo nho cho a
a = malloc(...)
su dung queue de loang
	dll voi gtype
	push_back
	pop_front

Luu ket qua vao sll_t cho

a[0] = sll_create_list()
...
*/